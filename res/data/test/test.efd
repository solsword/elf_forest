// integers
[[i t 0]]
[[i t 12]]
[[i t 99947845612301310]]
[[i t -15]]
[[i t 0xabcdef]]
[[i t 0xa0b0c0d0e0f0]]
[[i t 0x80ff90ffa0ffb0ff]]
[[i t 0x80ff90ffa0ffb0ff00ff10ff20ff30ff]]
[[i t 0x80ff90ffa0ffb0ff00ff10ff20ff30ff34567890]]
[[i t -0xff]]
[[i t 0x0001]]
[[o t:itest
  [[s input ""]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "1"]]
  [[s expect "success"]]
  [[i output 1]]
]]
[[o t:itest
  [[s input "0"]]
  [[s expect "success"]]
  [[i output 0]]
]]
[[o t:itest
  [[s input "10"]]
  [[s expect "success"]]
  [[i output 10]]
]]
[[o t:itest
  [[s input "23"]]
  [[s expect "success"]]
  [[i output 23]]
]]
[[o t:itest
  [[s input "0x1"]]
  [[s expect "success"]]
  [[i output 1]]
]]
[[o t:itest
  [[s input "0xa"]]
  [[s expect "success"]]
  [[i output 10]]
]]
[[o t:itest
  [[s input "0x1a"]]
  [[s expect "success"]]
  [[i output 26]]
]]
[[o t:itest
  [[s input "0x0001"]]
  [[s expect "success"]]
  [[i output 1]]
]]
[[o t:itest
  [[s input "0xff"]]
  [[s expect "success"]]
  [[i output 255]]
]]
[[o t:itest
  [[s input "0xf9"]]
  [[s expect "success"]]
  [[i output 249]]
]]
[[o t:itest
  [[s input "249"]]
  [[s expect "success"]]
  [[i output 0xf9]]
]]
[[o t:itest
  [[s input "-3"]]
  [[s expect "success"]]
  [[i output -0x03]]
]]
[[o t:itest
  [[s input "-0x10"]]
  [[s expect "success"]]
  [[i output -16]]
]]
[[o t:itest
  [[s input "00"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "ff"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "c9"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "--3"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "03"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "0x-5"]]
  [[s expect "remainder"]]
  [[i output 0]]
  [[s remainder "x-5"]]
]]
[[o t:itest
  [[s input "-x35"]]
  [[s expect "failure"]]
]]
[[o t:itest
  [[s input "0x"]]
  [[s expect "remainder"]]
  [[i output 0]]
  [[s remainder "x"]]
]]
[[o t:itest
  [[s input "19ab"]]
  [[s expect "remainder"]]
  [[i output 19]]
  [[s remainder "ab"]]
]]
[[o t:itest
  [[s input "0-2"]]
  [[s expect "remainder"]]
  [[i output 0]]
  [[s remainder "-2"]]
]]
[[o t:itest
  [[s input "0xff-"]]
  [[s expect "remainder"]]
  [[i output 0xff]]
  [[s remainder "-"]]
]]
[[o t:itest
  [[s input "123-"]]
  [[s expect "remainder"]]
  [[i output 123]]
  [[s remainder "-"]]
]]
[[o t:itest
  [[s input "120x456"]]
  [[s expect "remainder"]]
  [[i output 120]]
  [[s remainder "x456"]]
]]
// numbers
[[n t 0.5]]
[[n t 182.1922]]
[[n t 1e7]]
[[n t 1.4e3]]
[[n t .4e3]]
[[n t 4.e3]]
[[n t 0]]
[[n t 1]]
[[o t:ntest
  [[s input ""]]
  [[s expect "failure"]]
]]
[[o t:ntest
  [[s input "0"]]
  [[s expect "success"]]
  [[n output 0]]
]]
[[o t:ntest
  [[s input "1"]]
  [[s expect "success"]]
  [[n output 1]]
]]
[[o t:ntest
  [[s input "1"]]
  [[s expect "success"]]
  [[n output 1.0]]
]]
[[o t:ntest
  [[s input "0.0"]]
  [[s expect "success"]]
  [[n output 0]]
]]
[[o t:ntest
  [[s input "1."]]
  [[s expect "success"]]
  [[n output 1.0]]
]]
[[o t:ntest
  [[s input "0003.5"]]
  [[s expect "failure"]]
]]
[[o t:ntest
  [[s input "0.."]]
  [[s expect "remainder"]]
  [[n output 0]]
  [[s remainder "."]]
]]
[[o t:ntest
  [[s input "1e+-2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "e+-2"]]
]]
[[o t:ntest
  [[s input "1e-+2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "e-+2"]]
]]
[[o t:ntest
  [[s input "1e++2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "e++2"]]
]]
[[o t:ntest
  [[s input "-2e--2"]]
  [[s expect "remainder"]]
  [[n output -2]]
  [[s remainder "e--2"]]
]]
[[o t:ntest
  [[s input "1+2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "+2"]]
]]
[[o t:ntest
  [[s input "1-2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "-2"]]
]]
[[o t:ntest
  [[s input "1.-2"]]
  [[s expect "remainder"]]
  [[n output 1]]
  [[s remainder "-2"]]
]]
// misc:
[[o t:ptest
  [[s input "[[s name_a_bit_too_long______________ 'this won''t work']]"]]
  [[s expect "remainder"]]
  [[s remainder "_ 'this won''t work']]"]]
]]
[[o t:ptest
  [[s input "[[s name_that's_fine 'this will work']]"]]
  [[s expect "success"]]
]]
// strings:
[[s t "test"]]
[[s t 'test']]
[[s t "string ' with embedded ' quotes"]]
[[s t 'string " with embedded " quotes']]
[[s t "string "" with embedded "" quotes"]]
[[s t 'string '' with embedded '' quotes']]
[[s name-with~some$chrs&*%)( "this name should be just fine"]]
[[s name_just_short_enough__ "this name should be just short enough to work"]]
// TODO: Allow this!
// [[s really_long_name_that_is_very_long_and_gets_used_just_fine_anyways_because_the_language_allows_that_so_shut_up "test" ]]
// object (rngtable):
[[o test_object:rngtbl
  [[i size 7]]
  [[ai values
    1, 2,
    3,
    4, 5,
    6, 7,
  ]]
  [[an weights
    0.40, 0.35, // 75% |  75%
    0.10,       // 10% |  85%
    0.05, 0.05, // 10% |  95%
    0.03, 0.02, //  5% | 100%
  ]]
]]

// globals:
[[Gi GLOBAL_INT 5]]
[[Gn GLOBAL_NUM 3.1415926]]
[[Gs GLOBAL_STR "This string goes directly into the globals..."]]

// references:
// TODO: Sort these out!
[[i refint 3]]
<<l refint>>
<<l refint@linkint>>
[[n refnum 3.5]]
<<l refnum@linknum>>
<<l refnum@linknum>>
[[s refstr "reference string"]]
<<l refstr@linkstr>>
[[c testref
  <<l refint>>
  <<l refnum>>
  <<l refstr@rntest>>
  [[i test 7]]
]]
[[c tr2
  <<l testref>>
  <<l testref.refint>>
  <<l testref.refnum>>
  <<l testref.rntest>>
  <<l testref.test>>
]]
<<l testref@overwrite
  [[i refint 8]]
  <<l tr2.refint>>
  [[i test 8]]
>>
<<l overwrite.test@overtest>>
[[c scope
  [[i i 3]]
  <<L i@j>>
  [[c nest1
    [[i i 5]]
    <<L ^.nest2.i@j>>
  ]]
  [[c nest2
    [[i i 7]]
    <<L ^.nest1.i@j>>
  ]]
]]
[[c tr3
  [[ai array
    1, 2, 3, #i:GLOBAL_INT
  ]]
]]

//functions and variable references
[[c testfun
  [[V locals
    <<l testref@~link>>
    [[i ~int 3]]
    [[n ~num 5.7]]
    [[s ~string "hello world"]]
    <<L ~int@~integer>>
    [[c ~tuple (n 1.1) (n 2.2) ]]
    [[c ~slist (s "one") (s "two") (s "three") (s "four")]]
    [[as ~sarray "wun", "tuo", "threigh", "foor"]]
    [[fi ~ichoice:F_CHOOSE
      <<v ~int>>
      (i 0)
      (i 1)
      (i 2)
      (i 3)
    ]]
    [[ff ~fchoice:F_CHOOSE
      <<v ~int>>
      [[c (s "hi")]]
      [[c (s "ho")]]
      [[c (s "he")]]
      [[c (s "ha")]]
    ]]
  ]]
  [[c test
    [[V nested
      [[i ~int 1]]
    ]]
    <<v ~int@*testint>>
    <<v ~ichoice@*testscope>>
  ]]
  [[ff testiter:F_ITERATE
    [[V iterate
      <<v ~slist@*lstring>>
      <<v ~sarray@*astring>>
      [[gi *iter1:G_RANGE (i 1) ]]
      [[gi *iter2:G_RANGE (i 3) (i 8) (i 2) ]]
      [[c values <<v *lstring>> <<v *asring>> <<v *testint>> <<v *testscope>> ]]
    ]]
  ]]
  [[fi plus:F_ADD
    [[fn rng:F_PTRF [[fi hash:F_BRNG [[fi rng:F_PRNG (i 17) ]] (i 1) ]] ]]
    <<v ~integer>>
  ]]
  [[fi plus:F_ADD
    (i 3)
    <<v ~integer>>
    (i 5)
  ]]
  [[fs index_1:F_INDEX <<v ~fchoice>> (i 0) ]]
  [[fs index_2:F_INDEX <<v ~slist>> (i 1) ]]
  [[fs index_3:F_INDEX <<v ~sarray>> (i 1) ]]
]]
[[c varscope
  [[V vars
    [[i ~int 1]]
    [[i ~other 17]]
    [[i ~over 8]]
    [[c ~struct
      [[n num 3.5]]
      [[n pi 3.1415926]]
      <<v ~over@over>>
    ]]
  ]]
  [[c nested
    [[V vars
      [[i ~over 1000]]
      <<v ~other@~vv>>
    ]]
    <<v ~int@t_int>>
    <<v ~other@t_other>>
    <<v ~over@t_over>>
    <<v ~vv@t_v>>
    <<v ~struct.num@t_num>>
    <<v ~struct.over@t_sover>>
  ]]
  <<l nested@nlink
    [[V vars
      [[i ~over 890]]
    ]]
  >>
]]
<<l varscope@ref1>>
<<l varscope@ref2 [[V vars [[i ~other 350]]]]>>
<<l varscope@ref3 [[V vars [[i ~over 35]]]]>>

[[o t:eqtest <<l varscope.nested.t_int>> (i 1) ]]
[[o t:eqtest <<l varscope.nested.t_other>> (i 17) ]]
[[o t:eqtest <<l varscope.nested.t_over>> (i 1000) ]]
[[o t:eqtest <<l varscope.nested.t_v>> (i 17) ]]
[[o t:eqtest <<l varscope.nested.t_num>> (n 3.5) ]]
[[o t:eqtest <<l varscope.nested.t_sover>> (i 8) ]]
[[o t:eqtest <<l varscope.nlink.t_over>> (i 890) ]]
[[o t:eqtest <<l varscope.nlink.t_sover>> (i 8) ]]

[[o t:eqtest <<l ref1.nested.t_int>> (i 1) ]]
[[o t:eqtest <<l ref1.nested.t_other>> (i 17) ]]
[[o t:eqtest <<l ref1.nested.t_over>> (i 1000) ]]
[[o t:eqtest <<l ref1.nested.t_v>> (i 17) ]]
[[o t:eqtest <<l ref1.nested.t_num>> (n 3.5) ]]
[[o t:eqtest <<l ref1.nested.t_sover>> (i 8) ]]
[[o t:eqtest <<l ref1.nlink.t_over>> (i 890) ]]
[[o t:eqtest <<l ref1.nlink.t_sover>> (i 8) ]]

[[o t:eqtest <<l ref2.nested.t_int>> (i 1) ]]
[[o t:eqtest <<l ref2.nested.t_other>> (i 350) ]]
[[o t:eqtest <<l ref2.nested.t_over>> (i 1000) ]]
[[o t:eqtest <<l ref2.nested.t_v>> (i 350) ]]
[[o t:eqtest <<l ref2.nested.t_num>> (n 3.5) ]]
[[o t:eqtest <<l ref2.nested.t_sover>> (i 8) ]]
[[o t:eqtest <<l ref2.nlink.t_over>> (i 890) ]]
[[o t:eqtest <<l ref2.nlink.t_sover>> (i 8) ]]

[[o t:eqtest <<l ref3.nested.t_int>> (i 1) ]]
[[o t:eqtest <<l ref3.nested.t_other>> (i 17) ]]
[[o t:eqtest <<l ref3.nested.t_over>> (i 35) ]]
[[o t:eqtest <<l ref3.nested.t_v>> (i 17) ]]
[[o t:eqtest <<l ref3.nested.t_num>> (n 3.5) ]]
[[o t:eqtest <<l ref3.nested.t_sover>> (i 35) ]]
[[o t:eqtest <<l ref3.nlink.t_over>> (i 890) ]]
[[o t:eqtest <<l ref3.nlink.t_sover>> (i 35) ]]
