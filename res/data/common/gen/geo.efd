{{c gen
{{c geo

[[V locals
  [[an ~CNST_AVG_WEIGHTS 1.5, 1.0, 0.7]]
  [[o ~SOURCE_DISTRIBUTION:rngtable
    [[i size 3]]
    [[ai values
      #i:GEO_IGNEOUS,
      #i:GEO_METAMORPHIC,
      #i:GEO_SEDIMENTARY
    ]]
    [[an weights
      0.35,
      0.25,
      0.4
    ]]
  ]]
  [[o ~IGNEOUS_COMP:rngtable
    [[i size 7]]
    [[ai values
      #i:MNRL_COMP_STONE,
      #i:MNRL_COMP_STONE_STONE,

      #i:MNRL_COMP_STONE_LIFE,

      #i:MNRL_COMP_STONE_METAL,
      #i:MNRL_COMP_STONE_METAL_METAL,

      #i:MNRL_COMP_STONE_RARE,
      #i:MNRL_COMP_LIFE,
    ]]
    [[an weights
      0.40, 0.35, // 75% |  75%
      0.10,       // 10% |  85%
      0.05, 0.05, // 10% |  95%
      0.03, 0.02, //  5% | 100%
    ]]
  ]]
  [[o ~METAMORPHIC_COMP:rngtable
    [[i size 15]]
    [[ai values
      #i:MNRL_COMP_STONE_WATER,
      #i:MNRL_COMP_STONE_STONE,
      #i:MNRL_COMP_STONE_METAL,

      #i:MNRL_COMP_STONE_STONE_STONE,
      #i:MNRL_COMP_STONE_STONE_METAL,
      #i:MNRL_COMP_STONE_METAL_METAL,

      #i:MNRL_COMP_STONE_STONE_LIFE,
      #i:MNRL_COMP_STONE_AIR,
      #i:MNRL_COMP_STONE_STONE,
      #i:MNRL_COMP_RARE_RARE,

      #i:MNRL_COMP_STONE_LIFE,
      #i:MNRL_COMP_STONE_METAL_RARE,
      #i:MNRL_COMP_STONE_RARE,

      #i:MNRL_COMP_STONE_STONE_RARE,
      #i:MNRL_COMP_STONE_RARE_RARE,
    ]]
    [[an weights
      0.17, 0.12, 0.12,        // 41% |  41%
      0.09, 0.09, 0.07,        // 25% |  66%
      0.06, 0.06, 0.06, 0.05,  // 23% |  89%
      0.04, 0.03, 0.02,        //  9% |  98%
      0.01, 0.01,              //  2% | 100%
    ]]
  ]]
  [[o ~SEDIMENTARY_COMP:rngtable
    [[i size 7]]
    [[ai values
      #i:MNRL_COMP_STONE_LIFE,
      #i:MNRL_COMP_STONE_WATER,
      #i:MNRL_COMP_STONE_AIR,

      #i:MNRL_COMP_LIFE,

      #i:MNRL_COMP_STONE,
      #i:MNRL_COMP_STONE_STONE,

      #i:MNRL_COMP_RARE_RARE,
    ]]
    [[an weights
      0.26, 0.23, 0.21,    // 70% |  70%
      0.12,                // 12% |  82%
      0.08, 0.06,          // 14% |  96%
      0.04,                //  4% | 100%
    ]]
  ]]
  [[o ~IGNEOUS_TRACES:rngtable
    [[i size 9]]
    [[ai values
      #i:MNRL_TRACE_NONE,

      #i:MNRL_TRACE_LIFE,
      #i:MNRL_TRACE_METAL,
      #i:MNRL_TRACE_METAL_METAL,

      #i:MNRL_TRACE_RARE,
      #i:MNRL_TRACE_METAL_RARE,

      #i:MNRL_TRACE_RARE_RARE,
      #i:MNRL_TRACE_STONE,
      #i:MNRL_TRACE_STONE_METAL,
    ]]
    [[an weights
      0.5,               // 50% |  50%
      0.12, 0.11, 0.11,  // 34% |  84%
      0.06, 0.05,        // 11% |  95%
      0.02, 0.02, 0.01,  //  5% | 100%
    ]]
  ]]
  [[o ~METAMORPHIC_TRACES:rngtable
    [[i size 11]]
    [[ai values
      #i:MNRL_TRACE_NONE,

      #i:MNRL_TRACE_RARE,
      #i:MNRL_TRACE_METAL,

      #i:MNRL_TRACE_WATER,
      #i:MNRL_TRACE_AIR,

      #i:MNRL_TRACE_METAL_RARE,
      #i:MNRL_TRACE_RARE_RARE,
      #i:MNRL_TRACE_METAL_METAL,

      #i:MNRL_TRACE_LIFE,
      #i:MNRL_TRACE_STONE_METAL,
      #i:MNRL_TRACE_STONE
    ]]
    [[an weights
      0.20,              // 20% |  20%
      0.15, 0.13,        // 28% |  48%
      0.10, 0.09,        // 19% |  67%
      0.07, 0.07, 0.07,  // 21% |  88%
      0.05, 0.04, 0.03   // 12% | 100%
    ]]
  ]]
  [[o ~SEDIMENTARY_TRACES:rngtable
    [[i size 8]]
    [[ai values
      #i:MNRL_TRACE_NONE,

      #i:MNRL_TRACE_STONE,

      #i:MNRL_TRACE_LIFE,

      #i:MNRL_TRACE_WATER,
      #i:MNRL_TRACE_AIR,

      #i:MNRL_TRACE_METAL,
      #i:MNRL_TRACE_STONE_METAL,
      #i:MNRL_TRACE_RARE
    ]]
    /* test */
    [[an weights
      0.5,               // 50% |  50%
      0.17,              // 17% |  67%
      0.12,              // 12% |  79%
      0.08, 0.06,        // 14% |  93%
      0.03, 0.02, 0.02   //  7% | 100%
    ]]
  ]]
  [[fai %EXPAND_COMPOSITION:lookup_key
    [[V default_arguments
      [[i ~composition #i:MNRL_COMP_STONE]]
    ]]
    <<v ~composition@input>>
    [[c entry
      [[i key #i:MNRL_COMP_STONE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_NONE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_LIFE]]
      [[ai value
        #i:EL_CATEGORY_LIFE,
        #i:EL_CATEGORY_NONE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_AIR]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_AIR,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_WATER]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_WATER,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_LIFE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_LIFE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_STONE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_STONE_LIFE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_LIFE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_STONE_STONE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_METAL]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_STONE_METAL]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_METAL
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_METAL_METAL]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_METAL
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_METAL_RARE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_RARE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_RARE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_STONE_RARE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_RARE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_STONE_RARE_RARE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_RARE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_COMP_RARE_RARE]]
      [[ai value
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
  ]]
  [[fai %EXPAND_TRACES:lookup_key
    [[V default_arguments
      [[i ~traces #i:MNRL_TRACE_AIR]]
    ]]
    <<v ~traces@input>>
    [[c entry
      [[i key #i:MNRL_TRACE_NONE]]
      [[ai value
        #i:EL_CATEGORY_NONE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_AIR]]
      [[ai value
        #i:EL_CATEGORY_AIR,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_WATER]]
      [[ai value
        #i:EL_CATEGORY_WATER,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_LIFE]]
      [[ai value
        #i:EL_CATEGORY_LIFE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_STONE]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_STONE_METAL]]
      [[ai value
        #i:EL_CATEGORY_STONE,
        #i:EL_CATEGORY_METAL
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_METAL]]
      [[ai value
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_METAL_METAL]]
      [[ai value
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_METAL
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_METAL_RARE]]
      [[ai value
        #i:EL_CATEGORY_METAL,
        #i:EL_CATEGORY_RARE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_RARE]]
      [[ai value
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_NONE
      ]]
    ]]
    [[c entry
      [[i key #i:MNRL_TRACE_RARE_RARE]]
      [[ai value
        #i:EL_CATEGORY_RARE,
        #i:EL_CATEGORY_RARE
      ]]
    ]]
  ]]
  [[ff %COMPUTE_STONE_COLOR:choose
    [[V default_arguments
      [[o ~constituents:NULL]]
      [[o ~traces:NULL]]
      [[i ~source 0]]
      [[n ~density 0]]
      [[n ~plasticity 0]]
      [[n ~hardness 0]]
      [[i ~seed 0]]
    ]]
    [[V locals
      [[fi ~hash:brng <<v ~seed>> (i 7182731) ]]
      [[fn ~el_brightness:weight
        [[an weights 0.3, 0.7 ]]
        [[fn rng:mult
          (n 100)
          [[fn pnorm:avg
            [[c components
              [[fn rng:rng_n
                [[fi rng:brng <<v ~hash>> (i 1) ]]
              ]]
              [[fn rng:rng_n
                [[fi rng:brng <<v ~hash>> (i 2) ]]
              ]]
            ]]
          ]]
        ]]
        [[fn cnst_tend:weighted_el_prop
          <<v ~constituents>>
          <<v ~CNST_AVG_WEIGHTS>>
          [[i attribute #i:EL_PRP_F_STONE_TND_BRIGHTNESS]]
        ]]
      ]]
      [[c ~el_chroma
        [[V locals
          [[ff ~per_constituent:iterate
            // TODO: Better color mixing here
            [[V iter_vars
              <<v ~constituents@*constituent>>
              [[gi *iter:range (i 1) ]]
            ]]
            [[fo element:get_element_species <<v *constituent>> ]]
            [[fn weight:weight
              [[an weights 0.5, 0.5 ]]
              [[fn exp:expdist
                [[fn rng:rng_n
                  [[fi rng:brng
                    <<v ~hash>>
                    [[fi it:mult (i 12131) <<v *iter>> ]]
                  ]]
                ]]
                [[fn if:if_eq
                  <<v ~source>>
                  (i #i:GEO_METAMORPHIC)
                  (n 1.5)
                  (n 4)
                ]]
              ]]
              [[fn if:if_eq
                <<v ~source>>
                (i #i:GEO_METAMORPHIC)
                // then:
                [[fn rng:rng_n
                  [[fi rng:brng
                    <<v ~hash>>
                    [[fi it:mult (i 13151) <<v *iter>> ]]
                  ]]
                ]]
                // else:
                [[fn norm:rng_normal
                  [[fi rng:brng
                    <<v ~hash>>
                    [[fi it:mult (i 13151) <<v *iter>> ]]
                  ]]
                  (n 0.4)
                  (n 1)
                ]]
              ]]
            ]]
            [[fn x:mult
              <<l ^.weight>>
              [[fn cosine:cosine
                [[fn chroma:get_el_attr
                  <<l ^.^.^.element>>
                  [[i attr #i:EL_PRP_F_STONE_TND_CHROMA]]
                ]]
              ]]
            ]]
            [[fn y:mult
              <<l ^.weight>>
              [[fn sine:sine
                [[fn chroma:get_el_attr
                  <<l ^.^.^.element>>
                  [[i attr #i:EL_PRP_F_STONE_TND_CHROMA]]
                ]]
              ]]
            ]]
          ]]
        ]]
        [[ff x_values:peek <<v ~per_constituent>> <<l x>>]]
        [[ff y_values:peek <<v ~per_constituent>> <<l y>>]]
      ]]
      [[fn ~el_hue:atan2
        // TODO: Better color-mixing algorithm?
        [[fn avg_y:avg <<v ~el_chroma.x_values>> ]]
        [[fn avg_x:avg <<v ~el_chroma.y_values>> ]]
      ]]
      [[fn ~el_intensity:sqrt
        // TODO: Better color-mixing algorithm?
        [[fn plus:add
          [[fn x2:pow [[fn avg_x:avg <<v ~el_chroma.x_values>> ]] (n 2) ]]
          [[fn y2:pow [[fn avg_y:avg <<v ~el_chroma.y_values>> ]] (n 2) ]]
        ]]
      ]]
      [[fn ~el_saturation:mult
        [[fn range:scale
          [[fn var:expdist
            <<v ~el_intensity>>
            [[fn if:if_eq <<v ~source>> (i #i:GEO_METAMORPHIC) (n 2) (n 3.5)]]
          ]]
          (n 60)
          (n 90)
        ]]
        [[fn select:weight
          [[an weights 0.7, 0.3 ]]
          [[fn saturation:expdist
            [[fn rng:rng_n
              [[fi rng:brng <<v ~hash>> (i 3) ]]
            ]]
            [[fn if:if_eq <<v ~source>> (i #i:GEO_METAMORPHIC) (n 2.7) (n 5)]]
          ]]
          <<v ~el_intensity>>
        ]]
      ]]
    ]]
    [[fi index:index_of
      <<v ~source@input>>
      [[i entry #i:GEO_IGNEOUS]]
      [[i entry #i:GEO_METAMORPHIC]]
      [[i entry #i:GEO_SEDIMENTARY]]
    ]]
    [[c igneous_color
      [[i fmt #i:CFMT_LCH]]
      [[fn L:pow
        [[fn w:weight
          [[an weights 0.6, 0.4 ]]
          <<v ~el_brightness>>
          [[fn mult:mult
            (n 100)
            [[fn mat_influence:weight
              [[an weights 0.6, 0.4]]
              [[fn invert:scale <<v ~density>> (n 1) (n 0) ]]
              <<v ~plasticity>>
            ]]
          ]]
        ]]
        (n 0.8)
      ]]
      [[fn c:mult
        <<v ~el_saturation>>
        [[fn factor:if_lt // A bimodal distribution
          [[fn rng:rng_n [[fi rng:brng <<v ~hash>> (i 4) ]] ]]
          (n 0.7)
          // then:
          [[fn norm:rng_normal
            [[fi rng:brng <<v ~hash>> (i 5) ]] (n 0.05) (n 0.3) ]]
          // else:
          [[fn norm:rng_normal
            [[fi rng:brng <<v ~hash>> (i 5) ]] (n 0.6) (n 0.8) ]]
        ]]
      ]]
      [[fn h:add
        <<v ~el_hue>>
        [[fn rng:rng_normal
          [[fi rng:brng <<v ~hash>> (i 6) ]]
          [[fn min:div (n #n:M_PI) (n -16.0) ]]
          [[fn max:div (n #n:M_PI) (n 16.0) ]]
        ]]
      ]]
    ]]
    [[c metamorphic_color
      [[i fmt #i:CFMT_LCH]]
      <<v ~el_brightness@L>> // unmodified
      [[fn c:weight
        [[V locals
          [[fn ~boost:rng_normal
            [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0.0) (n 0.4) ]]
        ]]
        [[c weights
          [[fn inv:scale <<v ~boost>> (n 1) (n 0) ]]
          <<v ~boost>>
        ]]
        <<v ~el_saturation>>
        [[fn s:scale
          [[fn rng:rng_n [[fi rng:brng <<v ~hash>> (i 8) ]] ]]
          (n 30)
          (n 100)
        ]]
      ]]
      [[fn h:add
        <<v ~el_hue>>
        [[fn rng:rng_normal
          [[fi rng:brng <<v ~hash>> (i 9) ]]
          [[fn min:div (n #n:M_PI) (n -6.0) ]]
          [[fn max:div (n #n:M_PI) (n 6.0) ]]
        ]]
      ]]
    ]]
    [[c sedimentary_color
      [[i fmt #i:CFMT_LCH]]
      [[fn L:mult
        <<v ~el_brightness>>
        [[fn brighten:rng_normal
          [[fi rng:brng <<v ~hash>> (i 10) ]] (n 1) (n 1.4) ]]
      ]]
      [[fn c:mult
        <<v ~el_saturation>>
        [[fn factor:expdist
          [[fn rng:rng_normal
            [[fi rng:brng <<v ~hash>> (i 11) ]] (n 0.3) (n 1) ]]
          (n 2)
        ]]
      ]]
      [[fn h:add
        <<v ~el_hue>>
        [[fn rng:rng_normal
          [[fi rng:brng <<v ~hash>> (i 12) ]]
          [[fn min:div (n #n:M_PI) (n -12.0) ]]
          [[fn max:div (n #n:M_PI) (n 12.0) ]]
        ]]
      ]]
    ]]
  ]]
]]

[[c %gen_stone_species
  [[V default_arguments
    [[o ~world_map:NULL]]
    [[i ~seed 0]]
  ]]
  [[V locals
    [[fi ~hash:brng <<v ~seed>> (i 467541) ]]
    [[fi ~source:sample_rngtable
      [[fi rng:brng <<v ~hash>> (i 0) ]]
      <<v ~SOURCE_DISTRIBUTION>>
    ]]
    [[fo ~comp_table:choose
      [[fi index:index_of
        <<v ~source@input>>
        [[i entry #i:GEO_IGNEOUS]]
        [[i entry #i:GEO_METAMORPHIC]]
        [[i entry #i:GEO_SEDIMENTARY]]
      ]]
      <<v ~IGNEOUS_COMP>>
      <<v ~METAMORPHIC_COMP>>
      <<v ~SEDIMENTARY_COMP>>
    ]]
    [[fo ~trace_table:choose
      [[fi index:index_of
        <<v ~source@input>>
        [[i entry #i:GEO_IGNEOUS]]
        [[i entry #i:GEO_METAMORPHIC]]
        [[i entry #i:GEO_SEDIMENTARY]]
      ]]
      <<v ~IGNEOUS_TRACES>>
      <<v ~METAMORPHIC_TRACES>>
      <<v ~SEDIMENTARY_TRACES>>
    ]]
  ]]
  [[V components
    [[c ~composition
      [[V locals
        [[fi ~composition:sample_rngtable
          [[fi rng:brng <<v ~hash>> (i 0) ]]
          <<v ~comp_table>>
        ]]
        [[fi ~trace_composition:sample_rngtable
          [[fi rng:brng <<v ~hash>> (i 1) ]]
          <<v ~trace_table>>
        ]]
        [[fai ~categories:call
          <<v %EXPAND_COMPOSITION>>
          [[V args <<v ~composition@~composition>> ]]
        ]]
        [[fai ~trace_categories:call
          <<v %EXPAND_TRACES>>
          [[V args <<v ~trace_composition@~traces>> ]]
        ]]
      ]]
      [[fi first_element:pick_element
        <<v ~world_map>>
        [[fi cat:index <<v ~categories>> (i 0) ]]
        [[c used /* empty */ ]]
        [[fi rng:brng <<v ~hash>> (i 2) ]]
      ]]
      [[fi second_element:pick_element
        <<v ~world_map>>
        [[fi cat:index <<v ~categories>> (i 1) ]]
        [[c used <<l ^.^.first_element>> ]]
        [[fi rng:brng <<v ~hash>> (i 3) ]]
      ]]
      [[fi third_element:pick_element
        <<v ~world_map>>
        [[fi cat:index <<v ~categories>> (i 2) ]]
        [[c used <<l ^.^.first_element>> <<l ^.^.second_element>> ]]
        [[fi rng:brng <<v ~hash>> (i 4) ]]
      ]]
      [[fi first_trace:pick_element
        <<v ~world_map>>
        [[fi cat:index <<v ~trace_categories>> (i 0) ]]
        [[c used /* empty */ ]]
        [[fi rng:brng <<v ~hash>> (i 5) ]]
      ]]
      [[fi second_trace:pick_element
        <<v ~world_map>>
        [[fi cat:index <<v ~trace_categories>> [[i idx 1]] ]]
        [[c used <<l ^.^.first_trace>> ]]
        [[fi rng:brng <<v ~hash>> (i 6) ]]
      ]]
      // Summary variables arrays:
      <<v ~composition@composition>>
      <<v ~trace_composition@trace_composition>>
      [[c constituents
        <<l ^.first_element>>
        <<l ^.second_element>>
        <<l ^.third_element>>
      ]]
      [[c traces
        <<l ^.first_trace>>
        <<l ^.second_trace>>
      ]]
    ]]
    [[c ~material
      [[V locals
        <<v ~composition.constituents@~constituents>>
        <<v ~composition.traces@~traces>>
      ]]
      [[ff typechoice:choose
        [[fi index:index_of
          <<v ~source@input>>
          [[i entry #i:GEO_IGNEOUS]]
          [[i entry #i:GEO_METAMORPHIC]]
          [[i entry #i:GEO_SEDIMENTARY]]
        ]]
        [[c igneous_material
          [[V locals
            [[fn ~base_density:weight
              [[an weights 0.4, 0.6 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0) (n 1) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_DENSITY]]
              ]]
            ]]
            [[fn ~base_sp_heat:weight
              [[an weights 0.42, 0.18, 0.4 ]]
              [[fn tighter:avg
                [[c components
                  [[fn rng:rng_normal
                    [[fi rng:brng <<v ~hash>> (i 8) ]] (n 0) (n 1) ]]
                  [[fn rng:rng_normal
                    [[fi rng:brng <<v ~hash>> (i 9) ]] (n 0) (n 1) ]]
                ]]
              ]]
              [[fn bd:scale <<v ~base_density>> (n 1) (n 0) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_SP_HEAT]]
              ]]
            ]]
            [[fn ~base_tr_temp:weight
              [[an weights 0.48, 0.12, 0.4 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 10) ]] (n 0) (n 1) ]]
              <<v ~base_density>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_TR_TEMP]]
              ]]
            ]]
            [[fn ~base_plastic_temp:pow
              [[fn base:rng_normal
                [[fi rng:brng <<v ~hash>> (i 11) ]] (n 0) (n 1) ]]
              (n 1.2)
            ]]
            [[fn ~cnst_plasticity:weighted_el_prop
              <<v ~constituents>>
              <<v ~CNST_AVG_WEIGHTS>>
              [[i attribute #i:EL_PRP_F_STONE_TND_PLASTICITY]]
            ]]
            // More than 75% of values fall into [0, 0.33]:
            [[fn ~base_cold_plasticity:weight
              [[an weights 0.7, 0.3 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 12) ]] (n 0) (n 1) ]]
                (n 5)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_warm_plasticity:weight
              [[an weights 0.6, 0.4 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 13) ]] (n 0) (n 1) ]]
                (n 3)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_hardness:weight
              [[an weights 0.36, 0.12, 0.12, 0.4 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 14) ]] (n 0) (n 1) ]]
              <<v ~base_density>>
              <<v ~base_warm_plasticity>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_HARDNESS]]
              ]]
            ]]
          ]]
          [[i origin #i:MO_IGNEOUS_MINERAL]]
          <<v ~base_density@base_density>>
          <<v ~base_sp_heat@base_sp_heat>>
          <<v ~base_tr_temp@base_tr_temp>>
          <<v ~base_plastic_temp@base_plastic_temp>>
          <<v ~base_cold_plasticity@base_cold_plasticity>>
          <<v ~base_warm_plasticity@base_warm_plasticity>>
          <<v ~base_hardness@base_hardness>>

          [[fn solid_density:scale <<v ~base_density>> (n 0.25) (n 5.0) ]]
          [[fn liquid_density:scale <<v ~base_density>> (n 2.5) (n 3.2) ]]
          [[fn gas_density:scale <<v ~base_density>> (n 1.8) (n 2.8) ]]

          [[fn solid_sp_heat:scale <<v ~base_sp_heat>> (n 0.3) (n 1.4) ]]
          [[fn liquid_sp_heat:scale <<v ~base_sp_heat>> (n 0.8) (n 2.2) ]]
          [[fn gas_sp_heat:scale <<v ~base_sp_heat>> (n 0.65) (n 1.1) ]]

          [[n cold_dmg_temp 0]]
          [[fi solidus:scale <<v ~base_tr_temp>> (n 550) (n 1250) ]]
          [[fi liquidus:add
            <<l ^.solidus>>
            [[fn rng:rng_normal
              [[fi rng:brng <<v ~hash>> (i 15) ]] (n 50) (n 250) ]]
          ]]
          [[fi boiling_point:scale <<v ~base_tr_temp>> (n 1800)(n 2400) ]]
          [[i ignition_point #i:MAT_MAX_TEMP]]
          [[i flash_point #i:MAT_MAX_TEMP]]

          [[fi cold_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.2) (n 0.7) ]]
          ]]
          [[fi warm_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.6) (n 1.0) ]]
          ]]

          [[fi cold_plasticity:constrain
            // Roughly 75% of igneous stones will have 0 plasticity (see above)
            [[fn dist:scale <<v ~base_cold_plasticity>> (n -5) (n 10) ]]
            [[n min 0]]
          ]]
          [[fi warm_plasticity:scale <<v ~base_warm_plasticity>> (n 5)(n 80)]]

          [[fn viscosity:pow
            (n 10)
            [[fn exp:add
              (n 4)
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 16) ]] (n 0) (n 2) ]]
              [[fn density:mult (n 3) <<v ~base_density>> ]]
              [[fn elemental:scale <<v ~cnst_plasticity>> (n 3) (n 0) ]]
            ]]
          ]]

          [[fi hardness:scale <<v ~base_hardness>> (n 100) (n 220) ]]
        ]]
        [[c metamorphic_material
          [[V locals
            [[fn ~base_density:weight
              [[an weights 0.4, 0.6 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 17) ]] (n 0) (n 1) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_DENSITY]]
              ]]
            ]]
            [[fn ~base_sp_heat:weight
              [[an weights 0.42, 0.18, 0.4 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 18) ]] (n 0) (n 1) ]]
              [[fn bd:scale <<v ~base_density>> (n 1) (n 0) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_SP_HEAT]]
              ]]
            ]]
            [[fn ~base_tr_temp:weight
              [[an weights 0.48, 0.12, 0.4 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 19) ]] (n 0) (n 1) ]]
              <<v ~base_density>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_TR_TEMP]]
              ]]
            ]]
            [[fn ~base_plastic_temp:pow
              [[fn base:rng_normal
                [[fi rng:brng <<v ~hash>> (i 20) ]] (n 0) (n 1) ]]
              (n 1.2)
            ]]
            [[fn ~cnst_plasticity:weighted_el_prop
              <<v ~constituents>>
              <<v ~CNST_AVG_WEIGHTS>>
              [[i attribute #i:EL_PRP_F_STONE_TND_PLASTICITY]]
            ]]
            [[fn ~base_cold_plasticity:weight
              [[an weights 0.5, 0.5 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 21) ]] (n 0) (n 1) ]]
                (n 3)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_warm_plasticity:weight
              [[an weights 0.5, 0.5 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 22) ]] (n 0) (n 1) ]]
                (n 2)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_hardness:weight
              [[an weights 0.36, 0.12, 0.12, 0.4 ]]
              [[fn rng:sqrt
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 23) ]] (n 0) (n 1) ]]
              ]]
              <<v ~base_density>>
              <<v ~base_warm_plasticity>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_HARDNESS]]
              ]]
            ]]
          ]]
          [[i origin #i:MO_METAMORPHIC_MINERAL]]
          <<v ~base_density@base_density>>
          <<v ~base_sp_heat@base_sp_heat>>
          <<v ~base_tr_temp@base_tr_temp>>
          <<v ~base_plastic_temp@base_plastic_temp>>
          <<v ~base_cold_plasticity@base_cold_plasticity>>
          <<v ~base_warm_plasticity@base_warm_plasticity>>
          <<v ~base_hardness@base_hardness>>

          [[fn solid_density:scale <<v ~base_density>> (n 0.9) (n 5.7) ]]
          [[fn liquid_density:scale <<v ~base_density>> (n 2.6) (n 3.2) ]]
          [[fn gas_density:scale <<v ~base_density>> (n 1.9) (n 2.8) ]]

          [[fn solid_sp_heat:scale <<v ~base_sp_heat>> (n 0.2) (n 1.5) ]]
          [[fn liquid_sp_heat:scale <<v ~base_sp_heat>> (n 0.7) (n 2.4) ]]
          [[fn gas_sp_heat:scale <<v ~base_sp_heat>> (n 0.6) (n 1.15) ]]

          [[n cold_dmg_temp 0]]
          [[fi solidus:scale <<v ~base_tr_temp>> (n 520) (n 1280) ]]
          [[fi liquidus:add
            <<l ^.solidus>>
            [[fn rng:rng_normal
              [[fi rng:brng <<v ~hash>> (i 24) ]] (n 20) (n 320) ]]
          ]]
          [[fi boiling_point:scale <<v ~base_tr_temp>> (n 1700)(n 2500) ]]
          // TODO: Flammable metamorphic stone?
          [[i ignition_point #i:MAT_MAX_TEMP]]
          [[i flash_point #i:MAT_MAX_TEMP]]

          [[fi cold_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.3) (n 0.7) ]]
          ]]
          [[fi warm_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.5) (n 1.0) ]]
          ]]

          [[fi cold_plasticity:constrain
            [[fn dist:scale <<v ~base_cold_plasticity>> (n -3) (n 18) ]]
            [[n min 0]]
          ]]
          [[fi warm_plasticity:scale<<v ~base_warm_plasticity>>(n 10)(n 100)]]

          [[fn viscosity:pow
            (n 10)
            [[fn exp:add
              (n 6)
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 25) ]] (n 0) (n 4) ]]
              [[fn density:mult (n 3) <<v ~base_density>> ]]
              [[fn elemental:scale <<v ~cnst_plasticity>> (n 3) (n 0) ]]
            ]]
          ]]

          [[fi hardness:scale <<v ~base_hardness>> (n 40) (n 230) ]]
        ]]
        [[c sedimentary_material
          [[V locals
            [[fn ~base_density:weight
              [[an weights 0.4, 0.6 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 26) ]] (n 0) (n 1) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_DENSITY]]
              ]]
            ]]
            [[fn ~base_sp_heat:weight
              [[an weights 0.42, 0.18, 0.4 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 27) ]] (n 0) (n 1) ]]
              [[fn bd:scale <<v ~base_density>> (n 1) (n 0) ]]
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_SP_HEAT]]
              ]]
            ]]
            [[fn ~base_tr_temp:weight
              [[an weights 0.48, 0.12, 0.4 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 28) ]] (n 0) (n 1) ]]
              <<v ~base_density>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_TR_TEMP]]
              ]]
            ]]
            [[fn ~base_plastic_temp:pow
              [[fn base:rng_normal
                [[fi rng:brng <<v ~hash>> (i 29) ]] (n 0) (n 1) ]]
              (n 1.3)
            ]]
            [[fn ~cnst_plasticity:weighted_el_prop
              <<v ~constituents>>
              <<v ~CNST_AVG_WEIGHTS>>
              [[i attribute #i:EL_PRP_F_STONE_TND_PLASTICITY]]
            ]]
            // Sedimentary rock is generally quite brittle
            [[fn ~base_cold_plasticity:weight
              [[an weights 0.8, 0.2 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 30) ]] (n 0) (n 1) ]]
                (n 5.3)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_warm_plasticity:weight
              [[an weights 0.6, 0.4 ]]
              [[fn rng:expdist
                [[fn base:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 31) ]] (n 0) (n 1) ]]
                (n 4)
              ]]
              <<v ~cnst_plasticity>>
            ]]
            [[fn ~base_hardness:weight
              [[an weights 0.36, 0.12, 0.12, 0.4 ]]
              [[fn rng:pow
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 32) ]] (n 0) (n 1) ]]
                (n 0.8)
              ]]
              <<v ~base_density>>
              <<v ~base_warm_plasticity>>
              [[fn cnst_tend:weighted_el_prop
                <<v ~constituents>>
                <<v ~CNST_AVG_WEIGHTS>>
                [[i attribute #i:EL_PRP_F_STONE_TND_HARDNESS]]
              ]]
            ]]
          ]]
          [[i origin #i:MO_SEDIMENTARY_MINERAL]]
          <<v ~base_density@base_density>>
          <<v ~base_sp_heat@base_sp_heat>>
          <<v ~base_tr_temp@base_tr_temp>>
          <<v ~base_plastic_temp@base_plastic_temp>>
          <<v ~base_cold_plasticity@base_cold_plasticity>>
          <<v ~base_warm_plasticity@base_warm_plasticity>>
          <<v ~base_hardness@base_hardness>>

          [[fn solid_density:scale <<v ~base_density>> (n 1.2) (n 4.9) ]]
          [[fn liquid_density:scale <<v ~base_density>> (n 2.6) (n 3.1) ]]
          [[fn gas_density:scale <<v ~base_density>> (n 1.6) (n 2.9) ]]

          [[fn solid_sp_heat:scale <<v ~base_sp_heat>> (n 0.4) (n 1.8) ]]
          [[fn liquid_sp_heat:scale <<v ~base_sp_heat>> (n 0.9) (n 2.3) ]]
          [[fn gas_sp_heat:scale <<v ~base_sp_heat>> (n 0.7) (n 1.2) ]]

          // TODO: Really?
          [[n cold_dmg_temp 0]]
          [[fi solidus:scale <<v ~base_tr_temp>> (n 440) (n 1220) ]]
          [[fi liquidus:add
            <<l ^.solidus>>
            [[fn rng:rng_normal
              [[fi rng:brng <<v ~hash>> (i 33) ]] (n 10) (n 190) ]]
          ]]
          [[fi boiling_point:scale <<v ~base_tr_temp>> (n 1550)(n 2150) ]]
          // TODO: Fuel stones!
          [[i ignition_point #i:MAT_MAX_TEMP]]
          [[i flash_point #i:MAT_MAX_TEMP]]

          [[fi cold_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.2) (n 0.7) ]]
          ]]
          [[fi warm_plastic_temp:mult
            <<l ^.solidus>>
            [[fn base:scale <<v ~base_plastic_temp>> (n 0.5) (n 1.0) ]]
          ]]

          // Mostly 0 plasticity when cold
          [[fi cold_plasticity:constrain
            [[fn dist:scale <<v ~base_cold_plasticity>> (n -7) (n 12) ]]
            [[n min 0]]
          ]]
          [[fi warm_plasticity:scale <<v ~base_warm_plasticity>> (n 0)(n 60)]]

          [[fn viscosity:pow
            (n 10)
            [[fn exp:add
              (n 5)
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 34) ]] (n 0) (n 2) ]]
              [[fn density:mult (n 3) <<v ~base_density>> ]]
              [[fn elemental:scale <<v ~cnst_plasticity>> (n 3) (n 0) ]]
            ]]
          ]]

          [[fi hardness:scale <<v ~base_hardness>> (n 30) (n 180) ]]
        ]]
      ]]
      // Summary array:
      [[c base_properties
        [[fn base_density:peek <<l ^.^.typechoice>> <<l base_density>> ]]
        [[fn base_sp_heat:peek <<l ^.^.typechoice>> <<l base_sp_heat>> ]]
        [[fn base_tr_temp:peek <<l ^.^.typechoice>> <<l base_tr_temp>> ]]
        [[fn base_plastic_temp:peek
          <<l ^.^.typechoice>>
          <<l base_plastic_temp>>
        ]]
        [[fn base_cold_plasticity:peek
          <<l ^.^.typechoice>>
          <<l base_cold_plasticity>>
        ]]
        [[fn base_warm_plasticity:peek
          <<l ^.^.typechoice>>
          <<l base_warm_plasticity>>
        ]]
        [[fn base_hardness:peek <<l ^.^.typechoice>> <<l base_hardness>> ]]
      ]]
      [[c properties
        [[fi origin:peek <<l ^.^.typechoice>> <<l origin>> ]]
        [[fn solid_density:peek <<l ^.^.typechoice>> <<l solid_density>> ]]
        [[fn liquid_density:peek <<l ^.^.typechoice>> <<l liquid_density>> ]]
        [[fn gas_density:peek <<l ^.^.typechoice>> <<l gas_density>> ]]

        [[fn solid_sp_heat:peek <<l ^.^.typechoice>> <<l solid_sp_heat>> ]]
        [[fn liquid_sp_heat:peek <<l ^.^.typechoice>> <<l liquid_sp_heat>> ]]
        [[fn gas_sp_heat:peek <<l ^.^.typechoice>> <<l gas_sp_heat>> ]]

        [[fn cold_dmg_temp:peek <<l ^.^.typechoice>> <<l cold_dmg_temp>> ]]
        [[fn solidus:peek <<l ^.^.typechoice>> <<l solidus>> ]]
        [[fn liquidus:peek <<l ^.^.typechoice>> <<l liquidus>> ]]
        [[fn boiling_point:peek <<l ^.^.typechoice>> <<l boiling_point>> ]]
        [[fn ignition_point:peek <<l ^.^.typechoice>> <<l ignition_point>> ]]
        [[fn flash_point:peek <<l ^.^.typechoice>> <<l flash_point>> ]]

        [[fn cold_plastic_temp:peek
          <<l ^.^.typechoice>>
          <<l cold_plastic_temp>>
        ]]
        [[fn warm_plastic_temp:peek
          <<l ^.^.typechoice>>
          <<l warm_plastic_temp>>
        ]]

        [[fn cold_plasticity:peek <<l ^.^.typechoice>> <<l cold_plasticity>>]]
        [[fn warm_plasticity:peek <<l ^.^.typechoice>> <<l warm_plasticity>>]]

        [[fn viscosity:peek <<l ^.^.typechoice>> <<l viscosity>>]]

        [[fn hardness:peek <<l ^.^.typechoice>> <<l hardness>> ]]
      ]]
    ]]
    [[c ~appearance
      [[V locals
        <<v ~composition.constituents@~constituents>>
        <<v ~composition.traces@~traces>>
        <<v ~material.base_properties.base_density@~mat_density>>
        <<v ~material.base_properties.base_cold_plasticity@~mat_plasticity>>
        <<v ~material.base_properties.base_hardness@~mat_hardness>>
        [[fn ~softness:weight
          [[an weights 0.15, 0.15, 0.35, 0.35]]
          [[fn rng:rng_normal
            [[fi rng:brng <<v ~hash>> (i 35) ]] (n 0) (n 1) ]]
          [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
          <<v ~mat_plasticity>>
          [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
        ]]
      ]]
      [[ff typechoice:choose
        [[fi index:index_of
          <<v ~source@input>>
          [[i entry #i:GEO_IGNEOUS]]
          [[i entry #i:GEO_METAMORPHIC]]
          [[i entry #i:GEO_SEDIMENTARY]]
        ]]
        [[c igneous_appearance
          [[V locals
            [[fi ~hash:brng <<v ~seed>> (i 1021820) ]]
            [[fn ~soft:scale <<v ~softness>> (n 0.15) (n 0.35) ]]
          ]]
          <<v ~hash@seed>>
          [[fn scale:scale
            [[fn rng:weight
              [[an weights 0.8, 0.2 ]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 0) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
            ]]
            (n 0.1)
            (n 0.18)
          ]]
          [[fn gritty:scale
            [[fn rng:weight
              [[an weights 0.2, 0.2, 0.3, 0.3]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 1) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.14)
            (n 0.37)
          ]]
          [[fn contoured:scale
            [[fn rng:weight
              [[an weights 0.2, 0.25, 0.35, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 2) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.35)
            (n 0.7)
          ]]
          [[fn porous:scale
            [[fn rng:weight
              [[an weights 0.2, 0.4, 0.3, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 3) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.2)
            (n 1.0)
          ]]
          [[fn bumpy:scale
            [[fn rng:weight
              [[an weights 0.4, 0.4, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 4) ]] (n 0) (n 1) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.1)
            (n 0.5)
          ]]
          [[fn layered:scale
            [[fn rng:weight
              [[an weights 0.2, 0.3, 0.3, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 5) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0)
            (n 0.5)
          ]]
          [[fn layerscale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.3, 0.2, 0.2, 0.3]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 6) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact layers
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 3)
              (n 7)
            ]]
          ]]
          [[fn layerwaves:scale
            [[fn rng:weight
              [[an weights 0.2, 0.2, 0.4, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.5)
            (n 3.5)
          ]]
          [[fn wavescale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.3, 0.2, 0.2, 0.3]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 8) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact waves
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 3)
              (n 6)
            ]]
          ]]
          [[fn inclusions:pow
            [[fn rng:weight
              [[an weights 0.6, 0.1, 0.2, 0.1]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 9) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 2.5)
          ]]
          [[fn dscale:mult
            <<l ^.scale>>
            [[fn rng:scale
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.3, 0.1]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 10) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 0.86)
              (n 1.14)
            ]]
          ]]
          [[fn distortion:mult
            (n 7)
            [[fn rng:pow
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.3, 0.1]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 11) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 1.5)
            ]]
          ]]
          [[fn squash:div
            [[fn numerator:scale
              [[fn rng:weight
                [[an weights 0.6, 0.2, 0.2 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 12) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
              ]]
              [[fn min:sub (n 1) <<v ~soft>> ]]
              [[fn max:add (n 1) <<v ~soft>> ]]
            ]]
            [[fn denominator:scale
              [[fn rng:weight
                [[an weights 0.6, 0.2, 0.2 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 13) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              ]]
              [[fn min:sub (n 1) <<v ~soft>> ]]
              [[fn max:add (n 1) <<v ~soft>> ]]
            ]]
          ]]
          [[fn desaturate:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 14) ]] (n 0.4) (n 0.8) ]]
          [[fn sat_noise:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 15) ]] (n 0) (n 0.6) ]]
          [[fn brightness:scale
            [[fn brightness:weight
              [[an weights 0.8, 0.2 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 16) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
            ]]
            (n -0.2)
            (n 0.2)
          ]]
          [[ff color:call
            <<v %COMPUTE_STONE_COLOR>>
            [[V args
              <<v ~constituents@~constituents>>
              <<v ~traces@~traces>>
              <<v ~source@~source>>
              <<v ~mat_density@~density>>
              <<v ~mat_plasticity@~plasticity>>
              <<v ~mat_hardness@~hardness>>
              [[fi ~seed:brng <<v ~hash>> (i 17) ]]
            ]]
          ]]
          [[c alt_color
            [[V locals
              [[ff ~alt_base:call
                <<v %COMPUTE_STONE_COLOR>>
                [[V args
                  <<v ~constituents@~constituents>>
                  <<v ~traces@~traces>>
                  <<v ~source@~source>>
                  <<v ~mat_density@~density>>
                  <<v ~mat_plasticity@~plasticity>>
                  <<v ~mat_hardness@~hardness>>
                  [[fi ~seed:brng <<v ~hash>> (i 18) ]]
                ]]
              ]]
            ]]
            [[i fmt #i:CFMT_LCH]]
            // Inclusions are usually darker and less saturated
            [[fn L:mult
              [[fn L:peek <<v ~alt_base>> <<l L>> ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 19) ]] (n 0.4) (n 1.2) ]]
            ]]
            [[fn c:mult
              [[fn c:peek <<v ~alt_base>> <<l c>> ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 20) ]] (n 0.6) (n 1.1) ]]
            ]]
            [[fn h:peek <<v ~alt_base>> <<l h>> ]]
          ]]
        ]]
        [[c metamorphic_appearance
          [[V locals
            [[fi ~hash:brng <<v ~seed>> (i 1021820) ]]
            [[fn ~soft:scale <<v ~softness>> (n 0.25) (n 0.45) ]]
          ]]
          <<v ~hash@seed>>
          [[fn scale:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 0) ]] (n 0.08) (n 0.2) ]]
          [[fn gritty:scale
            [[fn rng:weight
              [[an weights 0.2, 0.3, 0.3, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 1) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.08)
            (n 0.33)
          ]]
          [[fn contoured:scale
            [[fn rng:weight
              [[an weights 0.4, 0.2, 0.3, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 2) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.15)
            (n 0.9)
          ]]
          [[fn porous:scale
            [[fn rng:weight
              [[an weights 0.4, 0.3, 0.2, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 3) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.1)
            (n 0.9)
          ]]
          [[fn bumpy:scale
            [[fn rng:weight
              [[an weights 0.4, 0.15, 0.25, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 4) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.1)
            (n 1.0)
          ]]
          [[fn layered:scale
            [[fn rng:expdist
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.3, 0.1]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 5) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 3)
            ]]
            (n 0.1)
            (n 0.8)
          ]]
          [[fn layerscale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.4, 0.1, 0.3, 0.2]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 6) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact layers
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 2.5)
              (n 10)
            ]]
          ]]
          [[fn layerwaves:scale
            [[fn rng:weight
              [[an weights 0.4, 0.2, 0.2, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.8)
            (n 5)
          ]]
          [[fn wavescale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.2, 0.2]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 8) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact waves
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 3)
              (n 7)
            ]]
          ]]
          [[fn inclusions:pow
            [[fn rng:weight
              [[an weights 0.5, 0.2, 0.2, 0.1]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 9) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 1.3)
          ]]
          [[fn dscale:mult
            <<l ^.scale>>
            [[fn rng:scale
              [[fn rng:weight
                [[an weights 0.6, 0.1, 0.2, 0.1]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 10) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 0.9)
              (n 1.1)
            ]]
          ]]
          [[fn distortion:scale
            [[fn rng:weight
              [[an weights 0.4, 0.1, 0.3, 0.2]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 11) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0)
            (n 6.5)
          ]]
          [[fn squash:div
            [[fn numerator:scale
              [[fn rng:weight
                [[an weights 0.8, 0.1, 0.1 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 12) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
              ]]
              [[fn min:sub (n 1) <<v ~soft>> ]]
              [[fn max:add (n 1) <<v ~soft>> ]]
            ]]
            [[fn denominator:scale
              [[fn rng:weight
                [[an weights 0.8, 0.1, 0.1 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 13) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              ]]
              [[fn min:sub (n 1) <<v ~soft>> ]]
              [[fn max:add (n 1) <<v ~soft>> ]]
            ]]
          ]]
          [[fn desaturate:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 14) ]] (n 0.0) (n 0.6) ]]
          [[fn sat_noise:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 15) ]] (n 0.1) (n 0.9) ]]
          [[fn brightness:scale
            [[fn brightness:weight
              [[an weights 0.9, 0.1 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 16) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
            ]]
            (n -0.25)
            (n 0.35)
          ]]
          [[ff color:call
            <<v %COMPUTE_STONE_COLOR>>
            [[V args
              <<v ~constituents@~constituents>>
              <<v ~traces@~traces>>
              <<v ~source@~source>>
              <<v ~mat_density@~density>>
              <<v ~mat_plasticity@~plasticity>>
              <<v ~mat_hardness@~hardness>>
              [[fi ~seed:brng <<v ~hash>> (i 17) ]]
            ]]
          ]]
          [[c alt_color
            [[V locals
              [[ff ~alt_base:call
                <<v %COMPUTE_STONE_COLOR>>
                [[V args
                  <<v ~constituents@~constituents>>
                  <<v ~traces@~traces>>
                  <<v ~source@~source>>
                  <<v ~mat_density@~density>>
                  <<v ~mat_plasticity@~plasticity>>
                  <<v ~mat_hardness@~hardness>>
                  [[fi ~seed:brng <<v ~hash>> (i 18) ]]
                ]]
              ]]
            ]]
            [[i fmt #i:CFMT_LCH]]
            // Inclusions tend to be more saturated:
            [[fn L:peek <<v ~alt_base>> <<l L>> ]]
            [[fn c:mult
              [[fn c:peek <<v ~alt_base>> <<l c>> ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 19) ]]
                (n 1.0)
                (n 1.5)
              ]]
            ]]
            [[fn h:peek <<v ~alt_base>> <<l h>> ]]
          ]]
        ]]
        [[c sedimentary_appearance
          [[V locals
            [[fi ~hash:brng <<v ~seed>> (i 1021820) ]]
            [[fn ~soft:scale <<v ~softness>> (n 0.2) (n 0.4) ]]
          ]]
          <<v ~hash@seed>>
          [[fn scale:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 0) ]] (n 0.07) (n 0.14) ]]
          [[fn gritty:scale
            [[fn rng:weight
              [[an weights 0.3, 0.3, 0.2, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 1) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.31)
            (n 0.56)
          ]]
          [[fn contoured:scale
            [[fn rng:weight
              [[an weights 0.4, 0.2, 0.3, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 2) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.15)
            (n 1.1)
          ]]
          [[fn porous:scale
            [[fn rng:weight
              [[an weights 0.4, 0.3, 0.2, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 3) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              <<v ~mat_hardness>>
            ]]
            (n 0.3)
            (n 0.8)
          ]]
          [[fn bumpy:scale
            [[fn rng:weight
              [[an weights 0.4, 0.2, 0.2, 0.2]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 4) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.3)
            (n 0.9)
          ]]
          [[fn layered:scale
            [[fn rng:weight
              [[an weights 0.4, 0.2, 0.3, 0.1]]
              [[fn rng:rng_uniform
                [[fi rng:brng <<v ~hash>> (i 5) ]] (n 0) (n 1) ]]
              <<v ~mat_density>>
              <<v ~mat_plasticity>>
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 0.1)
            (n 1.0)
          ]]
          [[fn layerscale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.4, 0.1, 0.3, 0.2]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 6) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact layers
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 2)
              (n 10)
            ]]
          ]]
          [[fn layerwaves:scale
            [[fn exp:expdist
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.2, 0.2]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 2)
            ]]
            (n 0.5)
            (n 4.5)
          ]]
          [[fn wavescale:div
            (n 1)
            [[fn divisor:scale
              [[fn rng:weight
                [[an weights 0.4, 0.2, 0.2, 0.2]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 8) ]] (n 0) (n 1) ]]
                // Note higher divisors -> more compact waves
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 2.5)
              (n 5)
            ]]
          ]]
          [[fn inclusions:pow
            [[fn rng:weight
              [[an weights 0.5, 0.2, 0.1, 0.2]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 9) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
            ]]
            (n 1.9)
          ]]
          [[fn dscale:mult
            <<l ^.scale>>
            [[fn rng:scale
              [[fn rng:weight
                [[an weights 0.6, 0.1, 0.2, 0.1]]
                [[fn rng:rng_uniform
                  [[fi rng:brng <<v ~hash>> (i 10) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
                <<v ~mat_hardness>>
              ]]
              (n 0.8)
              (n 1.2)
            ]]
          ]]
          [[fn distortion:mult
            (n 4.5)
            [[fn pow:pow
              [[fn rng:weight
                [[an weights 0.4, 0.1, 0.3, 0.2]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 11) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                <<v ~mat_plasticity>>
                [[fn invert:scale <<v ~mat_hardness>> (n 1) (n 0) ]]
              ]]
              (n 1.4)
            ]]
          ]]
          [[fn squash:div
            [[fn numerator:scale
              [[fn rng:weight
                [[an weights 0.8, 0.1, 0.1 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 12) ]] (n 0) (n 1) ]]
                <<v ~mat_density>>
                <<v ~mat_plasticity>>
              ]]
              [[fn min:sub (n 0.9) <<v ~soft>> ]]
              [[fn max:add (n 0.9) <<v ~soft>> ]]
            ]]
            [[fn denominator:scale
              [[fn rng:weight
                [[an weights 0.8, 0.1, 0.1 ]]
                [[fn rng:rng_normal
                  [[fi rng:brng <<v ~hash>> (i 13) ]] (n 0) (n 1) ]]
                [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
                [[fn invert:scale <<v ~mat_plasticity>> (n 1) (n 0) ]]
              ]]
              [[fn min:sub (n 1.1) <<v ~soft>> ]]
              [[fn max:add (n 1.1) <<v ~soft>> ]]
            ]]
          ]]
          [[fn desaturate:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 14) ]] (n 0.3) (n 0.8) ]]
          [[fn sat_noise:rng_uniform
            [[fi rng:brng <<v ~hash>> (i 15) ]] (n 0.1) (n 0.7) ]]
          [[fn brightness:scale
            [[fn brightness:weight
              [[an weights 0.9, 0.1 ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 16) ]] (n 0) (n 1) ]]
              [[fn invert:scale <<v ~mat_density>> (n 1) (n 0) ]]
            ]]
            (n -0.05)
            (n 0.35)
          ]]
          [[ff color:call
            <<v %COMPUTE_STONE_COLOR>>
            [[V args
              <<v ~constituents@~constituents>>
              <<v ~traces@~traces>>
              <<v ~source@~source>>
              <<v ~mat_density@~density>>
              <<v ~mat_plasticity@~plasticity>>
              <<v ~mat_hardness@~hardness>>
              [[fi ~seed:brng <<v ~hash>> (i 17) ]]
            ]]
          ]]
          [[c alt_color
            [[V locals
              [[ff ~alt_base:call
                <<v %COMPUTE_STONE_COLOR>>
                [[V args
                  <<v ~constituents@~constituents>>
                  <<v ~traces@~traces>>
                  <<v ~source@~source>>
                  <<v ~mat_density@~density>>
                  <<v ~mat_plasticity@~plasticity>>
                  <<v ~mat_hardness@~hardness>>
                  [[fi ~seed:brng <<v ~hash>> (i 18) ]]
                ]]
              ]]
            ]]
            [[i fmt #i:CFMT_LCH]]
            // Inclusions are generally darker and less saturated:
            [[fn L:mult
              [[fn L:peek <<v ~alt_base>> <<l L>> ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 19) ]] (n 0.3) (n 1.3) ]]
            ]]
            [[fn c:mult
              [[fn c:peek <<v ~alt_base>> <<l c>> ]]
              [[fn rng:rng_normal
                [[fi rng:brng <<v ~hash>> (i 20) ]] (n 0.6) (n 1.2) ]]
            ]]
            [[fn h:peek <<v ~alt_base>> <<l h>> ]]
          ]]
        ]]
      ]]
    ]]
  ]]
  <<v ~source@source>>
  <<v ~composition@composition>>
  [[o material:material [[ff mat:peek <<v ~material.properties>> ]] ]]
  [[o appearance:mineral_filter_args <<v ~appearance>> ]]
]]

// TODO: Make this "return" a SCOPE node?
[[V %gen_strata_params
  [[V default_arguments
    [[i ~i 0]]
    [[i ~species 0]] // TODO: use this!
    [[i ~wm_seed 0]]
    [[i ~wm_width 0]]
    [[i ~wm_height 0]]
  ]]
  [[V locals
    [[fi ~hash:brng <<v ~wm_seed>> [[fi mult:mult <<v ~i>> (i 567) ]] ]]
  ]]
  <<v ~hash@~seed>>
  <<v ~species@~species>>
  [[fi ~profile:choose
    [[fi rng:brng <<v ~hash>> (i 1) ]]
    [[i option #i:MFN_SPREAD_UP]]
    [[i option #i:MFN_TERRACE]]
    [[i option #i:MFN_HILL]]
  ]]
  [[fn ~thickness:mult
    [[i base #i:BASE_STRATUM_THICKNESS]]
    [[fn exp:exp
      [[fn exponent:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 2) ]]
        (n -0.5)
        (n 3)
      ]]
    ]]
  ]]
  [[fn ~size:mult
    [[fn wsgavg:sqrt
      [[fn world_size:mult
        <<v ~wm_width>>
        <<v ~wm_height>>
      ]]
    ]]
    [[i bias #i:STRATA_AVG_SIZE]]
    [[i unit #i:WORLD_REGION_BLOCKS]]
    [[fn offset:rng_uniform
      [[fi rng:brng <<v ~hash>> (i 3) ]]
      (n 0.6)
      (n 1.4)
    ]]
  ]]
  [[fn ~cx:rng_uniform
    [[fi rng:brng <<v ~hash>> (i 4) ]]
    (n 0)
    <<v ~wm_width@max>>
  ]]
  [[fn ~cy:rng_uniform
    [[fi rng:brng <<v ~hash>> (i 5) ]]
    (n 0)
    <<v ~wm_height@max>>
  ]]
]]

[[c %gen_stratum
  [[V default_arguments
    [[i ~seed 0]]
    [[i ~species 0]] // TODO: Use this
    [[i ~source 0]]
    [[i ~profile 0]]
    [[n ~thickness 0]]
    [[n ~size 0]]
    [[n ~cx 0]]
    [[n ~cy 0]]
  ]]
  [[V locals
    [[fi ~hash:brng <<v ~seed>> (i 12098491) ]]
  ]]
  <<v ~hash@seed>>
  [[ff typechoice:choose
    [[fi index:index_of
      <<v ~source@input>>
      [[i entry #i:GEO_IGNEOUS]]
      [[i entry #i:GEO_METAMORPHIC]]
      [[i entry #i:GEO_SEDIMENTARY]]
    ]]
    [[c igneous_stratum
      [[fn persistence:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 0) ]] (n 1.2) (n 1.6) ]]
      [[fn scale_bias:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 1) ]] (n 0.7) (n 1.1) ]]
      [[fn radial_frequency:div
        [[n pi #n:M_PI]]
        [[fn uniform:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 2) ]] (n 2.4) (n 4.0) ]]
      ]]
      [[fn radial_variance:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 3) ]] (n 0.1) (n 0.4) ]]
      [[fn gross_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 4) ]] (n 900) (n 1400) ]]
      [[fn fine_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 5) ]] (n 110) (n 150) ]]
      [[fn large_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 6) ]] (n 0.6) (n 0.9) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 7) ]] (n 0.4) (n 0.65) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 8) ]] (n 0.17) (n 0.22) ]]
      ]]
      [[fn tiny_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 9) ]] (n 0.04) (n 0.10) ]]
      ]]
      [[fn detail_var:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 10) ]] (n 1) (n 3) ]]
      [[fn ridges:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 11) ]] (n 2) (n 5) ]]
      [[fn smoothing:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 12) ]] (n 0.15) (n 0.35) ]]
      // TODO: Vein scale/strength/species
      // TODO: inclusion frequency/species
    ]]
    [[c metamorphic_stratum
      [[fn persistence:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 13) ]] (n 0.8) (n 1.3) ]]
      [[fn scale_bias:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 14) ]] (n 0.8) (n 1.2) ]]
      [[fn radial_frequency:div
        [[n pi #n:M_PI]]
        [[fn uniform:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 15) ]] (n 2.8) (n 4.8) ]]
      ]]
      [[fn radial_variance:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 16) ]] (n 0.4) (n 0.8) ]]
      [[fn gross_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 17) ]] (n 1200) (n 2100) ]]
      [[fn fine_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 18) ]] (n 180) (n 290) ]]
      [[fn large_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 19) ]] (n 0.5) (n 0.8) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 20) ]] (n 0.3) (n 0.55) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 21) ]] (n 0.16) (n 0.22) ]]
      ]]
      [[fn tiny_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 22) ]] (n 0.02) (n 0.05) ]]
      ]]
      [[fn detail_var:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 23) ]] (n 0.3) (n 2.1) ]]
      [[fn ridges:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 24) ]] (n 0.4) (n 3.8) ]]
      [[fn smoothing:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 25) ]] (n 0.15) (n 0.60) ]]
      // TODO: Vein scale/strength/species
      // TODO: inclusion frequency/species
    ]]
    [[c sedimentary_stratum
      [[fn persistence:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 26) ]] (n 1.3) (n 1.8) ]]
      [[fn scale_bias:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 27) ]] (n 1.1) (n 1.4) ]]
      [[fn radial_frequency:div
        [[n pi #n:M_PI]]
        [[fn uniform:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 28) ]] (n 2.1) (n 3.3) ]]
      ]]
      [[fn radial_variance:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 29) ]] (n 0.05) (n 0.25) ]]
      [[fn gross_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 30) ]] (n 700) (n 1100) ]]
      [[fn fine_distortion:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 31) ]] (n 30) (n 60) ]]
      [[fn large_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 32) ]] (n 0.4) (n 0.65) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 33) ]] (n 0.2) (n 0.35) ]]
      ]]
      [[fn med_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 34) ]] (n 0.11) (n 0.16) ]]
      ]]
      [[fn tiny_var:mult
        <<v ~thickness>>
        [[fn rng:rng_uniform
          [[fi rng:brng <<v ~hash>> (i 35) ]] (n 0.03) (n 0.10) ]]
      ]]
      [[fn detail_var:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 36) ]] (n 0.7) (n 3.9) ]]
      [[fn ridges:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 37) ]] (n 0.8) (n 5.3) ]]
      [[fn smoothing:rng_uniform
        [[fi rng:brng <<v ~hash>> (i 38) ]] (n 1.12) (n 0.52) ]]
      // TODO: Vein scale/strength/species
      // TODO: inclusion frequency/species
    ]]
  ]]
]]

}} // c geo
}} // c gen
